generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          String   @id @default(uuid()) @db.Uuid
    name        String
    username    String   @unique
    email       String   @unique
    phoneNumber String   @unique
    password    String   @unique
    isActive    Boolean  @default(true)
    role        Role?    @default(Normal)
    createDate  DateTime @default(now())
    updateDate  DateTime @updatedAt()
}

model Product {
    id           String         @id @default(uuid()) @db.Uuid
    name         String         @unique()
    description  String
    price        Float
    imageUrl     String?
    createDate   DateTime       @default(now())
    updateDate   DateTime       @updatedAt()
    status       ProductStatus? @default(Available)
    OrderProduct OrderProduct[]
}

model Order {
    id           String         @id @default(uuid()) @db.Uuid
    customer     Customer       @relation(fields: [customerId], references: [id])
    customerId   String         @db.Uuid
    notes        String?
    createDate   DateTime       @default(now())
    updateDate   DateTime       @updatedAt()
    status       OrderStatus    @default(UnPaid)
    OrderProduct OrderProduct[]
}

model OrderProduct {
    id               String         @id @default(uuid()) @db.Uuid
    quantity         Int
    totalPrice       Float
    orderId          String         @unique @db.Uuid
    productId        String         @unique @db.Uuid
    billingAddressId String         @unique @db.Uuid
    order            Order          @relation(fields: [orderId], references: [id])
    product          Product        @relation(fields: [productId], references: [id])
    billingAddress   BillingAddress @relation(fields: [billingAddressId], references: [id])
}

model BillingAddress {
    id           String         @id @default(uuid()) @db.Uuid
    street       String
    city         String
    province     String
    postalCode   String
    country      String
    createDate   DateTime       @default(now())
    updateDate   DateTime       @updatedAt()
    OrderProduct OrderProduct[]
}

model Customer {
    id             String        @id @default(uuid()) @db.Uuid
    fullName       String
    paymentMethod  PaymentMethod
    contanctInfoId String        @db.Uuid
    createDate     DateTime      @default(now())
    updateDate     DateTime      @updatedAt()
    contanctInfo   ContanctInfo? @relation(fields: [contanctInfoId], references: [id])
    Order          Order[]
}

enum PaymentMethod {
    CASH
    CREDIT_CARD
    DEBIT_CARD
    PAYPAL
    OTHER
}

model ContanctInfo {
    id          String     @id @default(uuid()) @db.Uuid
    phoneNumber Int
    email       String
    createDate  DateTime   @default(now())
    updateDate  DateTime   @updatedAt()
    Customer    Customer[]
}

enum Role {
    Administrator
    Normal
    Manager
    pharmacists
}

enum OrderStatus {
    Paid
    UnPaid
    Canceled
}

enum ProductStatus {
    Available
    UnAvailable
}
