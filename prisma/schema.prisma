generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          String   @id @default(uuid()) @db.Uuid
    name        String
    username    String   @unique
    email       String   @unique
    phoneNumber Int      @unique
    password    String
    isActive    Boolean  @default(true)
    role        Role?    @default(Normal)
    createDate  DateTime @default(now())
    updateDate  DateTime @updatedAt()
}

model Product {
    id          String         @id @default(uuid()) @db.Uuid
    name        String
    description String
    price       Float
    imageUrl    String?
    createDate  DateTime       @default(now())
    updateDate  DateTime       @updatedAt()
    status      ProductStatus? @default(Available)
    Order       Order?         @relation(fields: [orderId], references: [id])
    orderId     String?        @db.Uuid
}

model Order {
    id               String         @id @default(uuid()) @db.Uuid
    customer         Customer       @relation(fields: [customerId], references: [id])
    customerId       String         @db.Uuid
    billingAddress   BillingAddress @relation(fields: [billingAddressId], references: [id])
    notes            String?
    billingAddressId String         @db.Uuid
    items            Product[]
    createDate       DateTime       @default(now())
    updateDate       DateTime       @updatedAt()
    status           OrderStatus    @default(UnPaid)
}

model BillingAddress {
    id         String   @id @default(uuid()) @db.Uuid
    street     String
    city       String
    Province   String
    PostalCode String
    Country    String
    createDate DateTime @default(now())
    updateDate DateTime @updatedAt()
    Order      Order[]
}

model Customer {
    id             String        @id @default(uuid()) @db.Uuid
    name           String
    orderHistory   String
    paymentMethod  String
    contanctInfoId String        @db.Uuid
    createDate     DateTime      @default(now())
    updateDate     DateTime      @updatedAt()
    contanctInfo   ContanctInfo? @relation(fields: [contanctInfoId], references: [id])
    Order          Order[]
}

model ContanctInfo {
    id          String     @id @default(uuid()) @db.Uuid
    phoneNumber String
    email       String
    createDate  DateTime   @default(now())
    updateDate  DateTime   @updatedAt()
    Customer    Customer[]
}

enum Role {
    Admin
    Normal
    Manager
    pharmacists
}

enum OrderStatus {
    Paid
    UnPaid
    Canceled
}

enum ProductStatus {
    Available
    UnAvailable
}
